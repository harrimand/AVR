; M2560 Final Practice

.nolist
.include "m2560def.inc"
.list

.def	TEMP = R16
.def	TEMPH = R17
.def	PJold = R18
.def	PCbit = R19  ; Pin Change Bit
.def	FunR0 = R12
.def	FunR1 = R13
.def	FunR2 = R14
.def	FunR3 = R15
.def	ZERO = R5

.ORG	$0000
		rjmp	RESET
.ORG	PCI1addr
		rjmp	PinChange2


RESET:
		ldi 	TEMP, high(RAMEND)
		out 	SPH, TEMP
		ldi 	TEMP, low(RAMEND)
		out 	SPL, TEMP
; Configure Pin Chang Interrupts
		ldi 	TEMP, (1<<PCINT12)|(1<<PCINT11)|(1<<PCINT10)|(1<<PCINT9)
		sts 	PCMSK1, TEMP

		clr 	TEMP
		sts 	DDRJ, TEMP

		ldi 	TEMP, (1<<PJ3)|(1<<PJ2)|(1<<PJ1)|(1<<PJ0)
		sts 	PORTJ, TEMP

		ldi 	TEMP, (1<<PCIE1)
		sts 	PCICR, TEMP

		clr 	PCbit
		clr 	ZERO

		lds 	PJold, PINJ
		andi	PJold, $0F

		sei

MAIN:
		sbis	GPIOR0, 7    ; Pin Change Flag
		rjmp	NoFun
		ldi 	ZH, high(FunAddress)  ; Fuunction Address Table
		ldi 	ZL, low(FunAddress)   ; Base Address
		add 	ZL, PCbit             ; Add offset to function address
		adc 	ZH, ZERO
		lsl 	ZL       ; Convert Word Address to Byte Address for LPM
		lpm 	TEMP, Z+   ; Loadd Function Address to TEMP
		lpm 	TEMPH, Z
		mov 	ZL, TEMP    ;Move TEMP to Z for icall 
		mov 	ZH, TEMPH
		icall		    ; Indirect Call to function 
		cbi 	GPIOR0, 7   ; Clear Pin Change Flag		
NoFun:
		nop
		rjmp	MAIN

PinChange2:  ; ISR for pin change finds pins 0..3 changed
		push	TEMP
		lds  	TEMP, PINJ  ; Read new pin values
		andi	TEMP, 0x0F  ; Mask out other pin values
		eor 	TEMP, PJold ; Exclusive OR to find changed pin
		lds 	PJold, PINJ ; copy pin values for next comparison 
		tst 	TEMP        ;Confirm that a pin was changed
		breq	ZeroEscape  ; If no pin changed, don't call function
		clr 	PCbit       ; Clear Counter to locate bit position
FindBit:
		inc 	PCbit       ; Count shifts to find set bit
		lsr 	TEMP        ; Shift Right into Carry
		brcc	FindBit     ; If Carry Clear, shift again
		dec 	PCbit       ; Subtract 1 for bit positions starting at 0
		sbi 	GPIOR0, 7   ; Set Pin Changed Flag

ZeroEscape:
		pop 	TEMP
		reti

Fun0:
		inc 	FunR0
		ret
Fun1:
		inc 	FunR1
		ret
Fun2:
		inc 	FunR2
		ret
Fun3:
		inc 	FunR3
		ret

FunAddress:  ; Table of function addresses
.dw 	Fun0, Fun1, Fun2, Fun3

